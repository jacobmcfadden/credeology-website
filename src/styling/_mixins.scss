// EFFECRTS
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

// IMAGE
@mixin bg-img($url, $c, $b-position, $repeat, $size, $position) {
  background-image: url($url);
  background-color: $c;
  background-position: $b-position;
  background-repeat: $repeat;
  background-size: $size;
  position: $position;
}

// Component STyling
@mixin button($background-color, $border-color, $padding, $font-family, $font-size, $color, $trans-border, $trans-bg, $trans-text, $trans-weight){
  background-color: $background-color;
  border: solid;
  border-color: $border-color;
  border-width: .15rem;
  border-radius: .25rem;
  padding: $padding;
  align-content: center;
  text-transform: uppercase;
  font-family: $font-family;
  font-size: $font-size;
  letter-spacing: .13rem;
  font-weight: 400;
  color: $color;
  text-decoration: none;
  &:hover {
    border: solid .15rem $trans-border;
    background-color: $trans-bg;
    font-weight: $trans-weight;
		cursor: pointer;
        color: $trans-text;
    @include transition (all .6s);
  }
}

// GRID MIXINS
@mixin create-mq($breakpoint, $min-or-max) {
  @if($breakpoint == 0) {
    @content;
  } @else {
    @media screen and (#{$min-or-max}-width: $breakpoint *1px) {
      @content;
    }
  }
}

@mixin create-col-classes($modifier, $grid-cols, $breakpoint) {
  @include create-mq($breakpoint, 'min') {
    &__col#{$modifier}-offset-0 {
      margin-left: 0;
    }
    @for $i from 1 through $grid-cols {
      &__col#{$modifier}-#{$i} {
        display: flex;
        flex-direction: column;
        justify-content: center;
        flex-basis: (100 / ($grid-cols / $i) ) * 1%;
      }
      &__col#{$modifier}-offset-#{$i} {
        margin-left: (100 / ($grid-cols / $i) ) * 1%;
      }
    }
  }
}



